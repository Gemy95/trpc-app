type DriverOrder {
  _id: String
  clientId: String
  branchId: String
  invoice: Invoice
  status: ORDER_STATUS
  items: [Item]
  clientNotes: [String]
  merchantNotes: [String]
  estimatedPreparationTime: String
  paymentType: PAYMENT_TYPES
  isDeleted: Boolean
  localOrder: Boolean
  orderType: ORDER_TYPE
  orderCreatedBy: String
  orderRefId: String
  orderSeqId: Int
  rateStatus: OrderRateStatus
  rejectedNotes: [String]
  createdAt: String
  updatedAt: String
  driverId: String
  driver: MerchantEmployee
}

type DriverOrderByBranch {
  _id: String
  merchant: Merchant
  status: ORDER_STATUS
  estimatedPreparationTime: String
  paymentType: PAYMENT_TYPES
  isDeleted: Boolean
  localOrder: Boolean
  orderType: ORDER_TYPE
  orderRefId: String
  orderSeqId: Int
  createdAt: String
  updatedAt: String
  branch: Branch
  orderCreatedBy: User
  invoice: Invoice
  transaction: Transaction
  items: [Item]
  rejectedNotes: [String]
  driverId: String
  driver: MerchantEmployee
}

type DriverFindAllOrdersByBranchRes {
  Orders: [DashboardOrderByBranch]
  Accepted: Int
  OnWayToClient: Int
  ClientNotRespondOrders: Int
  ClientNotDeliveredOrders: Int
  Delivered: Int
  page: Int
  pageCount: Int
  length: Int
}

input DriverOrderQueryDto {
  page: Int
  limit: Int
  paginate: Boolean
  fields: Void
  sort: Void
  orderRefId: String
  clientMobile: String
  clientEmail: String
  clientName: String
  transactionRefId: String
  orderType: String
  fromCreatedAt: String
  toCreatedAt: String
  status: ORDER_STATUS
}

type DriverOrderRes {
  _id: String
  invoice: Invoice
  status: ORDER_STATUS
  clientNotes: [String]
  merchantNotes: [String]
  estimatedPreparationTime: String
  localOrder: Boolean
  orderType: ORDER_TYPE
  orderRefId: String
  orderSeqId: Int
  rateStatus: OrderRateStatus
  createdAt: String
  updatedAt: String
  groups: Groups
  items: [ItemOrderRes]
  orderCreatedBy: User
  merchant: Merchant
  branch: Branch
  rejectedNotes: [String]
  paymentType: PAYMENT_TYPES
  driverId: String
  driver: MerchantEmployee
}

type DriverOrderActionRes {
  _id: String
  invoice: Invoice
  status: ORDER_STATUS
  clientNotes: [String]
  merchantNotes: [String]
  estimatedPreparationTime: String
  localOrder: Boolean
  orderType: ORDER_TYPE
  orderRefId: String
  orderSeqId: Int
  rateStatus: OrderRateStatus
  createdAt: String
  updatedAt: String
  groups: Groups
  items: [ItemOrderRes]
  orderCreatedBy: User
  branchId: Branch
  rejectedNotes: [String]
  driverId: String
  driver: MerchantEmployee
}

type Mutation {
  driverOrderOnWayToClient(orderId: String): DriverOrderActionRes
  driverOrderArrivedToClient(orderId: String): DriverOrderActionRes
  driverOrderDeliveredToClient(orderId: String): DriverOrderActionRes
  driverOrderClientNotRespond(orderId: String): DriverOrderActionRes
  driverOrderClientNotDelivered(orderId: String): DriverOrderActionRes
}

type Query {
  driverFindAllOrdersByBranch(branchId: String, query: DriverOrderQueryDto): DriverFindAllOrdersByBranchRes
  driverFindOneOrder(orderId: String!): DriverOrderRes
}
