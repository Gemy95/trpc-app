enum CLIENT_STATUS {
  active
  inActive
  banned
}

enum ClientOwnerTypesDetailsEnum {
  Client
  Owner
}

type Client {
  _id: String
  dateOfBirth: String
  balance: Float
  status: CLIENT_STATUS
  role: IRole
  imageUrl: String
  mobileIsVerified: Boolean
  emailIsVerified: Boolean
  name: String
  countryCode: String
  mobile: String
  email: String
  password: String
  cityId: String
  countryId: String
  uuid: String
  gender: String
  isDeleted: Boolean
  otp_verify_type: OTP_VERIFICATION_TYPE
  total_orders_count: Int
  createdAt: String
  updatedAt: String
}

type ClientAndTokens {
  _id: String
  dateOfBirth: String
  balance: Float
  status: CLIENT_STATUS
  role: IRole
  imageUrl: String
  mobileIsVerified: Boolean
  emailIsVerified: Boolean
  name: String
  countryCode: String
  mobile: String
  email: String
  password: String
  cityId: String
  countryId: String
  uuid: String
  gender: String
  isDeleted: Boolean
  otp_verify_type: OTP_VERIFICATION_TYPE
  token: String
  refreshToken: String
}

input CreateClientDto {
  name: String!
  countryCode: String!
  mobile: String!
  email: String!
  password: String!
  cityId: String
  countryId: String
  uuid: String
  balance: Float
  dateOfBirth: String
  gender: Gender
}

input VerifyChangeMobileClientDto {
  countryCode: String!
  mobile: String
  otp: String!
  uuid: String
}

input BodyConfirmClientDto {
  otp: String!
  uuid: String
}

input ParamsConfirmClientDto {
  email: String!
}

input LoginClientDto {
  countryCode: String!
  mobile: String!
  password: String!
  uuid: String
}

input RequestForgetPasswordClientDto {
  email: String!
}

type ClientRequestForgetPasswordRes {
  success: Boolean
  expirationInSeconds: Float
}

input VerifyForgetPasswordClientDto {
  email: String!
  otp: String!
}

type VerifyForgetPasswordRes {
  success: Boolean
}

input ChangePasswordClientDto {
  email: String!
  password: String!
  oldPassword: String!
  otp: String!
  uuid: String
}

input UpdateClientDto {
  name: String
  cityId: String
  countryId: String
  uuid: String
  dateOfBirth: String
  imageUrl: String
}

input CreateAddressDto {
  name: String!
  longitude: Float
  latitude: Float
  longitudeDelta: Float
  latitudeDelta: Float
  type: CLIENT_ADDRESS_TYPE
  street: String!
  city: String
  active: Boolean
  floor: Int
  note: String
  client: String
}

type ClientListAddressRes {
  addresses: [Address]
  page: Int
  pages: Int
  length: Int
}

input CreateAddressDto {
  name: String!
  longitude: Float
  latitude: Float
  longitudeDelta: Float
  latitudeDelta: Float
  type: CLIENT_ADDRESS_TYPE
  street: String!
  city: String
  active: Boolean
  floor: Int
  note: String
  client: String
}

type ClientResendOtpRes {
  success: Boolean
}

input ResendOtpClientDto {
  countryCode: String!
  mobile: String!
}

input ClientFiltersQuery {
  search: String
  page: Int
  limit: Int
  paginate: Boolean
  fields: Void
  sort: Void
  cities: [String]
  mobile: String
  email: String
  isDeleted: Boolean
}

input MerchantFiltersClientQuery {
  search: String
  page: Int
  limit: Int
  paginate: Boolean
  fields: Void
  sort: Void
  mobile: String
}

type DashboardFindAllClientsRes {
  users: [Client]
  page: Int
  pages: Int
  length: Int
}

type ClientForMerchant {
  _id: String
  name: String
  countryCode: String
  mobile: String
  email: String
  gender: String
  isDeleted: Boolean
  createdAt: String
  updatedAt: String
}

type MerchantFindAllClientsRes {
  users: [ClientForMerchant]
  page: Int
  pages: Int
  length: Int
}

input AdminUpdateClientDto {
  _id: String
  dateOfBirth: String
  balance: Float
  role: IRoleInput
  imageUrl: String
  mobileIsVerified: Boolean
  emailIsVerified: Boolean
  name: String
  countryCode: String
  mobile: String
  email: String
  password: String
  cityId: String
  countryId: String
  uuid: String
  gender: String
  isDeleted: Boolean
  otp_verify_type: OTP_VERIFICATION_TYPE
  status: CLIENT_STATUS
}

# type ClusterCustomers {
#   _id: String
#   name: String
#   countryCode: String
#   mobile: String
#   email: String
#   location: Location
#   distance: Float
# }

# type DashboardFindAllClientsByBranchIdRes {
#   _id: String
#   count: Int
#   customers: [ClusterCustomers]
# }

type Mutation {
  createClient(createClientDto: CreateClientDto): Client
  clientVerifyMobile(verifyChangeMobileClientDto: VerifyChangeMobileClientDto): ClientAndTokens
  clientVerifyEmail(
    bodyConfirmClientDto: BodyConfirmClientDto
    paramsConfirmClientDto: ParamsConfirmClientDto
  ): ClientAndTokens
  clientLogin(loginClientDto: LoginClientDto): ClientAndTokens
  clientRequestForgetPassword(
    requestForgetPasswordClientDto: RequestForgetPasswordClientDto
  ): ClientRequestForgetPasswordRes
  clientVerifyForgetPassword(verifyForgetPasswordClientDto: VerifyForgetPasswordClientDto): VerifyForgetPasswordRes
  clientChangePassword(changePasswordClientDto: ChangePasswordClientDto): ClientAndTokens
  clientUpdate(id: String!, updateClientDto: UpdateClientDto): Client
  clientAddAddress(createAddressDto: CreateAddressDto): Address
  clientUpdateAddress(addressId: String, updateAddressDto: CreateAddressDto): Address
  clientRemoveAddress(addressId: String): Address
  clientResendOtp(resendOtpClientDto: ResendOtpClientDto): ClientResendOtpRes
  dashboardUpdateClient(id: String!, adminUpdateClientDto: AdminUpdateClientDto): Client
  clientRefreshToken: ClientAndTokens
}

type Query {
  clientListAddress: ClientListAddressRes
  dashboardFindOneClientOrOwnerDetails(client_owner_id: String!, client_owner_type: ClientOwnerTypesDetailsEnum): Client
  dashboardFindAllClients(filters: ClientFiltersQuery): DashboardFindAllClientsRes
  merchantFindAllClients(filters: MerchantFiltersClientQuery): MerchantFindAllClientsRes
  # dashboardFindAllClientsByBranchId(branchId: String): [DashboardFindAllClientsByBranchIdRes]
}
