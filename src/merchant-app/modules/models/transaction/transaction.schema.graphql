enum TRANSACTION_TYPE {
  deserved
  discount
  reward
  compensation
  adjustment
  refund
}

type Transaction {
  operationId: String
  amount: Float
  tax: String
  commission: Float
  from: User
  to: Merchant
  operationType: TRANSACTION_TYPE
  orderId: String
  status: ORDER_STATUS
  order: Order
  branch: Branch
  createdAt: String
  updatedAt: String
}

input TransactionQueryDto {
  search: String
  page: Int
  limit: Int
  paginate: Boolean
  fields: Void
  sort: Void
  merchantId: String
  operationId: String
  orderRefId: String
  clientId: String
  branchId: String
  orderStatus: ORDER_STATUS
  fromCreatedAt: String
  toCreatedAt: String
}

type FindAllTransactionsRes {
  transactions: [Transaction]
  page: Int
  pages: Int
  length: Int
}

input GetAllTransactionDto {
  page: Int
  limit: Int
  sortBy: String
  paginate: Boolean
  order: Int
  merchantId: String
  operationId: String
  orderRefId: String
  clientId: String
  branchId: String
  orderStatus: ORDER_STATUS
  fromCreatedAt: String
  toCreatedAt: String
}

type FindAllByMerchantIdRes {
  transactions: [Transaction]
  page: Int
  pages: Int
  length: Int
}

input UpdateTransactionDto {
  operationId: String
  amount: Float
  tax: String
  commission: Int
  from: String
  to: String
  operationType: TRANSACTION_TYPE
  orderId: String
  status: ORDER_STATUS
}

type Mutation {
  updateTransaction(transactionId: String!, updateTransactionDto: UpdateTransactionDto): Transaction
}

type Query {
  findAllTransactions(query: TransactionQueryDto): FindAllTransactionsRes
  findAllTransactionsByMerchantId(getAllTransactionDto: GetAllTransactionDto): FindAllByMerchantIdRes
  findOneTransaction(tranasactionId: String!): Transaction
}
