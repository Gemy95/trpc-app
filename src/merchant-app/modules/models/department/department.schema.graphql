type DepartmentTranslation {
  _lang: String
  name: String
}

input DepartmentTranslationInput {
  _lang: String
  name: String
}

type Department {
  _id: String
  name: String
  uuid: String
  image: String
  translation: [DepartmentTranslation]
  oneSignalTags: [String]
  isDeleted: Boolean
}

input CreateDepartmentDto {
  nameEnglish: String!
  nameArabic: String!
  uuid: String
  image: String
  oneSignalTags: [String]
}

input GetAllDepartmentsDto {
  name: String
  tags: [String]
  page: Int
  limit: Int
  sortBy: String
  paginate: Boolean
  order: Int
}

type DepartmentsData {
  name: String
  translation: [DepartmentTranslation]
  oneSignalTags: [String]
  createdAt: String
  updatedAt: String
  status: String
  ActiveEmployees: [User]
  InActiveEmployees: [User]
}

type FindAllDepartmentsRes {
  departments: [DepartmentsData]
  page: Int
  pages: Int
  length: Int
}

input UpdateDepartmentDto {
  nameEnglish: String
  nameArabic: String
  uuid: String
  image: String
  oneSignalTags: [String]
}

type RemoveOneDepartmentRes {
  success: Boolean
}

type Mutation {
  createDepartment(body: CreateDepartmentDto): Department
  updateOneDepartment(id: String!, body: UpdateDepartmentDto): Department
  removeOneDepartment(id: String!): RemoveOneDepartmentRes
}

type Query {
  findAllDepartments(query: GetAllDepartmentsDto): FindAllDepartmentsRes
  findOneDepartment(id: String!): Department
}
