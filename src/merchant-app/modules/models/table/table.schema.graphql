enum TABLE_STATUS {
  available
  busy
}

enum TABLE_TYPE {
  table
  room
  meeting_room
}

enum TABLE_LOCATION {
  north
  south
  east
  west
  in_door
  out_door
  middle
}

type TableTranslation {
  _lang: String
  name: String
  location: [TABLE_LOCATION]
  description: String
}

type TableTranslationInput {
  _lang: String
  name: String
  location: [TABLE_LOCATION]
  description: String
}

input TableImageTranslationInput {
  _lang: String
  title: String
  description: String
}

type TableImageTranslation {
  _lang: String
  title: String
  description: String
}

type TableImage {
  url: String
  title: String
  description: String
  translation: [TableImageTranslation]
}

input TableImageDto {
  url: String!
  titleArabic: String
  titleEnglish: String
  descriptionArabic: String
  descriptionEnglish: String
}

type Table {
  _id: String
  number: String
  floor: Int
  capacity: Int
  vip: Boolean
  extraPrice: Float
  name: String
  description: String
  type: TABLE_TYPE
  status: TABLE_STATUS
  branchId: String
  location: [TABLE_LOCATION]
  translation: [TableTranslation]
  images: [TableImage]
  isDeleted: Boolean
  reservationsDays: [ReservationsDays]
}

input CreateTableDto {
  number: String
  floor: Int!
  capacity: Int!
  vip: Boolean
  extraPrice: Float
  nameEnglish: String!
  nameArabic: String!
  descriptionEnglish: String
  descriptionArabic: String
  branchId: String!
  locationEnglish: [TABLE_LOCATION]
  location: [TABLE_LOCATION!]!
  type: TABLE_TYPE
  images: [TableImageDto]
}

input UpdateTableDto {
  number: String
  floor: Int
  capacity: Int
  vip: Boolean
  extraPrice: Float
  nameEnglish: String
  nameArabic: String
  descriptionEnglish: String
  descriptionArabic: String
  locationEnglish: [TABLE_LOCATION]
  location: [TABLE_LOCATION]
  type: TABLE_TYPE
  status: TABLE_STATUS
  images: [TableImageDto]
}

input GetOneTablesDto {
  branchId: String!
}

input GetTablesDto {
  branchId: String!
  page: Int
  limit: Int
  sortBy: String
  paginate: Boolean
  order: Int
}

type DashboardFindAllTablesRes {
  tables: [Table]
  page: Int
  pages: Int
  length: Int
}

type DashboardFindAllAvailableTablesRes {
  tables: [Table]
  page: Int
  pages: Int
  length: Int
}

input GetAvailableTablesDto {
  branchId: String!
  dateTime: String!
  day: DAYS!
  page: Int
  limit: Int
  sortBy: String
  paginate: Boolean
  order: Int
}

type DashboardDeleteTableRes {
  success: Boolean
}

# queries
type Query {
  dashboardFindAllTables(getTablesDto: GetTablesDto!): DashboardFindAllTablesRes
  dashboardFindOneTable(tableId: String!, branchId: String!): Table
  dashboardFindAllAvailableTables(getAvailableTablesDto: GetAvailableTablesDto!): DashboardFindAllAvailableTablesRes
}
# mutations
type Mutation {
  dashboardCreateTable(createTableDto: CreateTableDto): Table
  dashboardDeleteTable(tableId: String!, branchId: String!): DashboardDeleteTableRes
  dashboardUpdateOneTable(tableId: String!, branchId: String!, updateTableDto: UpdateTableDto): Table
}
