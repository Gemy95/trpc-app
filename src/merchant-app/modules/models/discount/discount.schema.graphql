enum DiscountTypes {
  fixed
  percentage
}

type Discount {
  _id: String
  amount: Float
  type: DiscountTypes
  startDate: String
  endDate: String
  isActive: Boolean
  products: [Product]
  createdAt: String
  updatedAt: String
}

input CreateDiscountDto {
  amount: Float!
  type: DiscountTypes!
  startDate: String!
  endDate: String!
  isActive: Boolean
  products: [String]
}

input UpdateDiscountDto {
  amount: Float
  type: DiscountTypes
  startDate: String
  endDate: String
  isActive: Boolean
  products: [String]
}

type FindAllDiscountsRes {
  discounts: [Discount]
  page: Int
  pages: Int
  length: Int
}

type Mutation {
  createDiscount(createDiscountDto: CreateDiscountDto): [Product]
  updateDiscount(id: String!, updateDiscountDto: UpdateDiscountDto): Discount
  removeDiscount(id: String!): Discount
}

type Query {
  findAllDiscounts: FindAllDiscountsRes
  findAllDiscountByMerchantId(merchantId: String!, query: BaseQueryInput): FindAllDiscountsRes
  findOneDiscount(id: String!): Discount
}
