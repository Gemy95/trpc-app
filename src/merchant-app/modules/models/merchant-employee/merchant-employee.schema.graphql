enum MERCHANT_EMPLOYEE_STATUS {
  active
  inActive
  banned
}

enum MERCHANT_EMPLOYEE_JOB {
  cashier
  seller
  manager
  guest
  employee
  delivery
  chef
}

type MerchantEmployee {
  _id: String
  status: MERCHANT_EMPLOYEE_STATUS
  dateOfBirth: String
  image: String
  job: MERCHANT_EMPLOYEE_JOB
  merchantId: String
  branchesIds: [String]
  role: IRole
  name: String
  countryCode: String
  mobile: String
  email: String
  password: String
  uuid: String
  cityId: String
  countryId: String
  mobileIsVerified: Boolean
  emailIsVerified: Boolean
  isPasswordReset: Boolean
  type: String
  isDeleted: Boolean
  otp_verify_type: OTP_VERIFICATION_TYPE
  createdAt: String
  updatedAt: String
}

type MerchantEmployeeResetPasswordRes {
  _id: String
  name: String
  countryCode: String
  mobile: String
  email: String
  uuid: String
  mobileIsVerified: Boolean
  emailIsVerified: Boolean
  isPasswordReset: Boolean
  type: String
  isDeleted: Boolean
  otp_verify_type: OTP_VERIFICATION_TYPE
  role: IRole
  job: MERCHANT_EMPLOYEE_JOB
  status: MERCHANT_EMPLOYEE_STATUS
  dateOfBirth: String
  gender: String
  createdAt: String
  updatedAt: String
  country: Country
  city: City
  merchant: Merchant
  branches: [Branch]
  token: String
  refreshToken: String
  success: Boolean
}

type FindOneMerchantEmployeeRes {
  _id: String
  status: MERCHANT_EMPLOYEE_STATUS
  dateOfBirth: String
  image: String
  job: MERCHANT_EMPLOYEE_JOB
  merchantId: Merchant
  branchesIds: [Branch]
  role: IRole
  name: String
  countryCode: String
  mobile: String
  email: String
  password: String
  uuid: String
  cityId: String
  countryId: String
  mobileIsVerified: Boolean
  emailIsVerified: Boolean
  isPasswordReset: Boolean
  type: String
  isDeleted: Boolean
  otp_verify_type: OTP_VERIFICATION_TYPE
  createdAt: String
  updatedAt: String
}

input PermissionValue {
  value: String
}

input CreateMerchantEmployeeDto {
  name: String!
  countryCode: String!
  merchantId: String
  mobile: String
  email: String
  password: String
  cityId: String
  countryId: String
  uuid: String
  dateOfBirth: String
  gender: Gender
  job: MERCHANT_EMPLOYEE_JOB
  branchesIds: [String]
  otp_verify_type: OTP_VERIFICATION_TYPE
  permissions: [PermissionValue]
}

input UpdateMerchantEmployeeDto {
  name: String
  countryCode: String
  merchantId: String
  mobile: String
  email: String
  password: String
  cityId: String
  countryId: String
  uuid: String
  dateOfBirth: String
  gender: Gender
  job: MERCHANT_EMPLOYEE_JOB
  branchesIds: [String]
  otp_verify_type: OTP_VERIFICATION_TYPE
  status: MERCHANT_EMPLOYEE_STATUS
  permissions: [PermissionValue]
}

input UpdateMerchantEmployeeByItselfDto {
  name: String
  cityId: String
  dateOfBirth: String
  gender: Gender
  job: MERCHANT_EMPLOYEE_JOB
  oldPassword: String
  newPassword: String
}

type MerchantEmployeeRes {
  _id: String
  status: MERCHANT_EMPLOYEE_STATUS
  dateOfBirth: String
  image: String
  job: MERCHANT_EMPLOYEE_JOB
  merchantId: String
  branchesIds: [Branch]
  role: IRole
  name: String
  countryCode: String
  mobile: String
  email: String
  password: String
  uuid: String
  cityId: String
  countryId: String
  mobileIsVerified: Boolean
  emailIsVerified: Boolean
  isPasswordReset: Boolean
  type: String
  isDeleted: Boolean
  otp_verify_type: OTP_VERIFICATION_TYPE
  createdAt: String
  updatedAt: String
}

type FindAllMerchantEmployeesByMerchantRes {
  users: [MerchantEmployeeRes]
  page: Int
  pages: Int
  length: Int
}

type UpdateMerchantEmployeesByItselfRes {
  _id: String
  status: MERCHANT_EMPLOYEE_STATUS
  dateOfBirth: String
  image: String
  job: MERCHANT_EMPLOYEE_JOB
  merchantId: String
  branchesIds: [String]
  role: IRole
  name: String
  countryCode: String
  mobile: String
  email: String
  password: String
  uuid: String
  cityId: City
  countryId: Country
  mobileIsVerified: Boolean
  emailIsVerified: Boolean
  isPasswordReset: Boolean
  type: String
  isDeleted: Boolean
  otp_verify_type: OTP_VERIFICATION_TYPE
  createdAt: String
  updatedAt: String
  gender: String
}

input FindAllMerchantEmployeeByMerchantIdDto {
  page: Int
  limit: Int
  sortBy: String
  paginate: Boolean
  order: Int
  job: [MERCHANT_EMPLOYEE_JOB]
}

input CreateMerchantEmployeesDto {
  merchantEmployees: [CreateMerchantEmployeeDto]
}

type MerchantEmployeesRes {
  merchantEmployees: [MerchantEmployee]
}

input ResetPasswordMerchantEmployeeDto {
  tempPassword: String
  newPassword: String
  uuid: String
}

type Mutation {
  createMerchantEmployee(createMerchantEmployeeDto: CreateMerchantEmployeeDto): MerchantEmployee
  shoppexEmployeeUpdateMerchantEmployee(
    employeeId: String!
    updateMerchantEmployeeDto: UpdateMerchantEmployeeDto
  ): MerchantEmployee
  removeMerchantEmployee(employeeId: String!): MerchantEmployee
  updateMerchantEmployeesByItself(
    updateMerchantEmployeeByItselfDto: UpdateMerchantEmployeeByItselfDto
  ): UpdateMerchantEmployeesByItselfRes
  createMerchantEmployees(createMerchantEmployeesDto: CreateMerchantEmployeesDto): MerchantEmployeesRes
  merchantEmployeesResetPassword(
    resetPasswordMerchantEmployeeDto: ResetPasswordMerchantEmployeeDto
  ): MerchantEmployeeResetPasswordRes
}

type Query {
  findAllMerchantEmployeesByMerchant(
    merchantId: String!
    params: FindAllMerchantEmployeeByMerchantIdDto
  ): FindAllMerchantEmployeesByMerchantRes
  findOneMerchantEmployee(employeeId: String!): FindOneMerchantEmployeeRes
}
