type TranslationMenuTemplate {
  _lang: String
  name: String
}

input TranslationMenuTemplateInput {
  _lang: String
  name: String
}

type ProductCategoryAndProducts {
  name: String
  translation: [ProductCategoryTranslation]
  status: PRODUCT_CATEGORY_STATUS
  image: String
  menuTemplateProductsIds: [String]
}

input ProductCategoryAndProductsInput {
  nameArabic: String
  nameEnglish: String
  status: PRODUCT_CATEGORY_STATUS
  image: String
  menuTemplateProductsIds: [String]
}

type MenuTemplate {
  _id: String
  name: String
  # category: Category
  categoryId: String
  productCategoryAndProducts: [ProductCategoryAndProducts]
  translation: [TranslationMenuTemplate]
  createdAt: String
  updatedAt: String
}

input MenuTemplateInput {
  nameArabic: String
  nameEnglish: String
  categoryId: String
  productCategoryAndProducts: [ProductCategoryAndProductsInput]
}

input UpdateMenuTemplateInput {
  nameArabic: String
  nameEnglish: String
  categoryId: String
  productGroups: [CreateProductGroupDto]
  productCategoryAndProducts: [ProductCategoryAndProductsInput]
}

type FindAllMenuTemplatesRes {
  page: Int
  pages: Int
  length: Int
  menutemplates: [MenuTemplate]
}

type ShoppexEmployeeDeleteMenuTemplateRes {
  success: Boolean
}

input FindAllMenuTemplatesInput {
  page: Int
  limit: Int
  sortBy: String
  paginate: Boolean
  order: Int
}

type Mutation {
  shoppexEmployeeCreateMenuTemplate(createMenuTemplateDto: MenuTemplateInput): MenuTemplate
  shoppexEmployeeUpdateMenuTemplate(
    menuTemplateId: String!
    updateMenuTemplateDto: UpdateMenuTemplateInput
  ): MenuTemplate
  shoppexEmployeeDeleteMenuTemplate(menuTemplateId: String!): ShoppexEmployeeDeleteMenuTemplateRes
}

type Query {
  findAllMenuTemplates(params: FindAllMenuTemplatesInput): FindAllMenuTemplatesRes
  findOneMenuTemplate(menuTemplateId: String!): MenuTemplate
}
