enum DAYS {
   saturday
   sunday
   monday
   tuesday
   wednesday
   thursday
   friday
}

enum RESERVATION_USER_TYPES {
  MERHCNAT_EMPLOYEE
  SHOPPEX_EMPLOYEE
  CLIENT
}

enum RESERVATION_TYPE {
  offline_book
  book
}

enum APPROVE_OR_REJECT_RESERVATION_STATUS {
  rejected
  accepted
  waiting
}

enum RESERVATION_STATUS {
  pending
  rejected
  accepted
  attended
  waiting
  canceled_by_client
  canceled_by_employee
  canceled_by_shoppex
  canceled_by_system
}

enum RESERVATION_PLATFORM {
  web
  android
  ios
  desktop
  store_front_web
  store_front_mobile
}

# export enum RESERVATION_GUEST_TYPE {
#   ADULT = 'adult',
#   CHILDREN = 'children',
# }

type Reservation {
  _id: String
  merchant: String
  branch: String
  client: String
  clientName: String
  clientMobile: String
  reservationCreatedBy: String
  clientDetails: [String]
  type: RESERVATION_TYPE
  status: RESERVATION_STATUS
  dateTime: String
  day: DAYS
  timeFrom: String
  timeTo: String
  numberOfGuests: Int
  numberOfAdultsGuests: Int
  numberOfChildrenGuests: Int
  clientNotes: String
  paymentType: PAYMENT_TYPES
  isWaitingList: Boolean
  employeeNotes: String
  invoice: Invoice
  isDeleted: Boolean
  # items: [Item]
  tables: [String]
  reservationRefId: String
  platform: RESERVATION_PLATFORM
  createdAt: String
  updatedAt: String
}

type ReservationRes {
  _id: String
  merchant: Merchant
  branch: Branch
  client: Client
  clientName: String
  clientMobile: String
  reservationCreatedBy: User
  clientDetails: [String]
  type: RESERVATION_TYPE
  status: RESERVATION_STATUS
  dateTime: String
  day: DAYS
  timeFrom: String
  timeTo: String
  numberOfGuests: Int
  numberOfAdultsGuests: Int
  numberOfChildrenGuests: Int
  clientNotes: String
  paymentType: PAYMENT_TYPES
  isWaitingList: Boolean
  employeeNotes: String
  invoice: Invoice
  isDeleted: Boolean
  # items: [Item]
  tables: [Table]
  reservationRefId: String
  totalClientReservationsCount: Int
  totalClientCanceledReservationsCount: Int
  platform: RESERVATION_PLATFORM
  createdAt: String
  updatedAt: String
}

input ReservationInput {
  merchant: String
  branch: String
  clientDetails: [String]
  dateTime: String
  day: DAYS
  timeFrom: String
  timeTo: String
  numberOfGuests: Int
  numberOfAdultsGuests: Int
  numberOfChildrenGuests: Int
  clientNotes: String
  paymentType: PAYMENT_TYPES
  employeeNotes: String
  # items: [ItemInput]
  tablesIds: [String]
  platform: RESERVATION_PLATFORM
}

input ReservationDashboardInput {
  merchant: String
  branch: String
  clientDetails: [String]
  dateTime: String
  day: DAYS
  timeFrom: String
  timeTo: String
  numberOfGuests: Int
  numberOfAdultsGuests: Int
  numberOfChildrenGuests: Int
  clientNotes: String
  paymentType: PAYMENT_TYPES
  employeeNotes: String
  # items: [ItemInput]
  clientId: String
  clientName: String
  clientMobile: String
  tablesIds: [String]
  isWaitingList: Boolean
  platform: RESERVATION_PLATFORM
}

type MarketplaceScheduledReservationRes {
  reservationsSettings: ReservationsSettings
  reservationsDays: [ReservationsDays]
}

type CreateReservationRes {
  success: Boolean
}

type CancelReservationRes {
  success: Boolean
}

type MarketplaceFindAllReservationRes {
  reservations: [ReservationRes]
  page: Int
  pages: Int
  length: Int
}

type MerchantFindAllReservationRes {
  reservations: [ReservationRes]
  totalWaitingListReservationsCount: Int
  dayCoverage: Float
  page: Int
  pages: Int
  length: Int
}

type MerchantApproveOrRejectReservationRes {
  success: Boolean
}

input ApproveOrRejectReservationDto {
  status: APPROVE_OR_REJECT_RESERVATION_STATUS
  notes: String
}

type MarketplaceCheckReservationDayRes {
  reservationsSettings: ReservationsSettings
  reservationsDays: ReservationsDays
}

input MarketPlaceFindAllReservationDto {
  search: String
  page: Int
  limit: Int
  paginate: Boolean
  fields: Void
  sort: Void
  status: RESERVATION_STATUS
}

input MerchantFindAllReservationDto {
  dateTime: String!
  day: DAYS!
  status: RESERVATION_STATUS
  clientMobile: String
  tablesIds: [String]
  isVipTable: Boolean
  page: Int  
  limit: Int
}

input MerchantFindCountReservationByDateDto {
  fromCreatedAt: String
  toCreatedAt: String
}

type MerchantFindCountReservationsByBranchIdAndDateRes {
  dateTime: String
  totalReservationsCount: Int
  totalPersonsCount: Int
}

type Mutation {
  # for marketplace reservation
  marketplaceCreateReservation(createReservationDto: ReservationInput!): CreateReservationRes
  marketplaceCancelReservation(reservationId: String!): CancelReservationRes
  # for merchant reservation
  merchantCreateReservation(createReservationDto: ReservationDashboardInput!): CreateReservationRes
  merchantApproveOrRejectReservation(
    reservationId: String!
    approveOrRejectReservationDto: ApproveOrRejectReservationDto
  ): MerchantApproveOrRejectReservationRes
}

type Query {
  # for marketplace reservation
  marketplaceAvailableReservationDays(branchId: String!): MarketplaceScheduledReservationRes
  marketplaceFindAllReservation(query: MarketPlaceFindAllReservationDto): MarketplaceFindAllReservationRes
  marketplaceFindOneReservation(reservationId: String!): ReservationRes
  marketplaceCheckReservationDay(branchId: String!, day: DAYS): MarketplaceCheckReservationDayRes

  # for merchant reservation
  merchantFindAllReservationsByBranchId(
    branchId: String!
    query: MerchantFindAllReservationDto
  ): MerchantFindAllReservationRes
  merchantFindOneReservation(reservationId: String!): ReservationRes
  merchantFindCountReservationsByBranchIdAndDate(
    branchId: String!
    query: MerchantFindCountReservationByDateDto
  ): [MerchantFindCountReservationsByBranchIdAndDateRes]

  # for dashboard
  dashboardFindAllReservationsByBranchId(query: GetAllDtoInput): MerchantFindAllReservationRes
}
