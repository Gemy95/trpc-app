type TranslationMenuTemplateProduct {
  _lang: String
  name: String
}

input TranslationMenuTemplateProductInput {
  _lang: String
  name: String
}

input CreateMenuTemplateProductDto {
  nameArabic: String
  nameEnglish: String
  descriptionArabic: String
  descriptionEnglish: String
  preparationTime: Int
  images: [ProductImageDto]
  mainImage: ProductImageDto
  price: Int
  status: STATUS
  calories: Int
  mealsTime: [PRODUCT_MEALS_TIME]
  tagsIds: [String]
  menuTemplateProductGroupsIds: [String]
}

type MenuTemplateProduct {
  _id: String
  name: String
  description: String
  preparationTime: Int
  images: [ProductImage]
  mainImage: ProductImage
  price: Int
  translation: [ProductTranslation]
  isDeleted: Boolean
  build_status: PRODUCT_BUILD_STATUS
  release_status: PRODUCT_RELEASE_STATUS
  status: STATUS
  calories: Int
  notes: [String]
  mealsTime: [MealsTime]
  quantity: Int
  tagsIds: [String]
  menuTemplateProductGroupsIds: [String]
}

input UpdateMenuTemplateProductInput {
  nameArabic: String
  nameEnglish: String
  descriptionArabic: String
  descriptionEnglish: String
  preparationTime: Int
  images: [ProductImageDto]
  mainImage: ProductImageDto
  price: Int
  status: STATUS
  calories: Int
  mealsTime: [PRODUCT_MEALS_TIME]
  tagsIds: [String]
  menuTemplateProductGroupsIds: [String]
}

type FindAllMenuTemplateProductsRes {
  page: Int
  pages: Int
  length: Int
  menutemplateproducts: [MenuTemplateProduct]
}

type ShoppexEmployeeDeleteMenuTemplateProductRes {
  success: Boolean
}

input FindAllMenuTemplateProductsInput {
  page: Int
  limit: Int
  sortBy: String
  paginate: Boolean
  order: Int
}

type Mutation {
  shoppexEmployeeCreateMenuTemplateProduct(createMenuTemplateProductDto: CreateMenuTemplateProductDto): MenuTemplateProduct
  shoppexEmployeeUpdateMenuTemplateProduct(
    menuTemplateProductId: String!
    updateMenuTemplateProductDto: UpdateMenuTemplateProductInput
  ): MenuTemplateProduct
  shoppexEmployeeDeleteMenuTemplateProduct(menuTemplateProductId: String!): ShoppexEmployeeDeleteMenuTemplateProductRes
}

type Query {
  findAllMenuTemplateProducts(params: FindAllMenuTemplateProductsInput): FindAllMenuTemplateProductsRes
  findOneMenuTemplateProduct(menuTemplateProductId: String!): MenuTemplateProduct
}
