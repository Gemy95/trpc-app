# enum MERCHANT_BUILD_STATUS {
#   pending
#   approved
#   rejected
# }

# enum MERCHANT_RELEASE_STATUS {
#   staging
#   production
#   testing
# }

enum MERCHANT_STATUS {
  pending
  approved
  rejected
  banned
}

enum MERCHANT_STATUS_TAGS {
  production_ready
  staging_ready
  under_review
  need_action
  review_docs
}

enum MERCHANT_VISIBILITY_STATUS {
  online
  offline
  busy
  closed
}

enum LINK_VISIT {
  twitterUrl
  facebookUrl
  websiteUrl
  snapUrl
  tiktokUrl
}

enum MENU_UPLOAD_STATUS {
  pending
  inProgress
  done
  rejected
}

type MenuUploadImage {
  url: String
}

type MenuUpload {
  mobile: String
  images: [MenuUploadImage]
  notes: String
}


type TranslationMerchant {
  _lang: String
  name: String
  description: String
}

input TranslationMerchantInput {
  _lang: String
  name: String
  description: String
}

type SocialMedia {
  url: String
  visits: Int
}

input SocialMediaInput {
  url: String
  visits: Int
}

enum BANK_ACCOUNT_TYPE {
  individual
  company
  foundation
}

type Subscriptions {
  amount: Float
  started_subscribe_date: String
  next_subscribe_payment_date: String
}

type BankAccount {
  _id: String
  bank: String
  nameOfPerson: String
  accountNumber: String
  iban: String
  accountType: BANK_ACCOUNT_TYPE
  accountImageUrl: String
  createdAt: String
  updatedAt: String
}

type BankAccountRes {
  _id: String
  nameOfPerson: String
  accountNumber: String
  iban: String
  accountType: BANK_ACCOUNT_TYPE
  accountImageUrl: String
  createdAt: String
  updatedAt: String
  bank: Bank
}

input BankAccountInput {
  bank: String!
  nameOfPerson: String!
  accountNumber: String!
  iban: String!
  accountType: BANK_ACCOUNT_TYPE!
  accountImageUrl: String
}

type MerchantCommissionsRes {
  type: AMOUNT_TYPE
  amount: Float
  orderType: ORDER_TYPE
}

input MerchantCommissionsInput {
  type: AMOUNT_TYPE!
  amount: Float!
  orderType: ORDER_TYPE!
}

type Merchant {
  _id: String
  name: String
  description: String
  commercialRegistrationNumber: String
  commercialName: String
  branchesNumber: Int
  hasDeliveryService: Boolean
  address: String
  uuid: String
  # build_status: MERCHANT_BUILD_STATUS
  # release_status: MERCHANT_RELEASE_STATUS
  status: MERCHANT_STATUS
  status_tags: MERCHANT_STATUS_TAGS
  visibility_status: MERCHANT_VISIBILITY_STATUS
  ownerId: String
  logo: String
  identificationImage: String
  commercialIdImage: String
  balance: Float
  location: Location
  locationDelta: [Int]
  notes: [String]
  isDeleted: Boolean
  translation: [TranslationMerchant]
  categoriesIds: [String]
  tagsIds: [String]
  cityId: String
  productsPriceRange: Float
  twitterUrl: SocialMedia
  facebookUrl: SocialMedia
  websiteUrl: SocialMedia
  snapUrl: SocialMedia
  tiktokUrl: SocialMedia
  mobile: String
  approvedBy: String
  inReview: Boolean
  createdAt: String
  updatedAt: String
  rating: Float
  isLiked: Boolean
  bankAccount: BankAccountRes
  subscriptions: Subscriptions
  menuTemplateId: String
  commissions: [MerchantCommissionsRes]
  city: City
  country: Country
  lowestPriceToOrder: Float
  minimum_delivery_price: Float
  menu_upload_status: MENU_UPLOAD_STATUS
  menuUpload: MenuUpload
}

input CreateMerchantInput {
  nameArabic: String!
  nameEnglish: String!
  descriptionArabic: String
  descriptionEnglish: String
  commercialRegistrationNumber: String!
  commercialName: String
  branchesNumber: Int
  hasDeliveryService: Boolean
  address: String
  uuid: String
  # build_status: MERCHANT_BUILD_STATUS
  # release_status: MERCHANT_RELEASE_STATUS
  status: MERCHANT_STATUS
  status_tags: MERCHANT_STATUS_TAGS
  visibility_status: MERCHANT_VISIBILITY_STATUS
  ownerId: String
  logo: String
  identificationImage: String
  commercialIdImage: String
  balance: Float
  location: LocationInput
  locationDelta: [Int]
  notes: [String]
  isDeleted: Boolean
  # translation: [TranslationMerchantInput]
  categoriesIds: [String]!
  tagsIds: [String]!
  cityId: String!
  productsPriceRange: Float
  twitterUrl: SocialMediaInput
  facebookUrl: SocialMediaInput
  websiteUrl: SocialMediaInput
  snapUrl: SocialMediaInput
  tiktokUrl: SocialMediaInput
  mobile: String
  bankAccount: BankAccountInput
  menuTemplateId: String
  lowestPriceToOrder: Float
  minimum_delivery_price: Float
}

input MerchantQueryInput {
  categories: [String]
  tags: [String]
  cities: [String]
  # build_status: MERCHANT_BUILD_STATUS
  # release_status: MERCHANT_RELEASE_STATUS
  status: MERCHANT_STATUS
  status_tags: MERCHANT_STATUS_TAGS
  visibility_status: MERCHANT_VISIBILITY_STATUS
  ownerMobile: String
  ownerEmail: String
}

type CreateMerchantRes {
  success: Boolean
  createdMerchant: Merchant
}

type FindAllMerchantsRes {
  merchants: Merchant
  page: Int
  pages: Int
  length: Int
  rejected: Int
  approved: Int
  pending: Int
}

type FindOneMerchantRes {
  _id: String
  name: String
  description: String
  commercialRegistrationNumber: String
  commercialName: String
  branchesNumber: Int
  hasDeliveryService: Boolean
  address: String
  uuid: String
  # build_status: MERCHANT_BUILD_STATUS
  # release_status: MERCHANT_RELEASE_STATUS
  status: MERCHANT_STATUS
  status_tags: MERCHANT_STATUS_TAGS
  visibility_status: MERCHANT_VISIBILITY_STATUS
  ownerId: String
  logo: String
  identificationImage: String
  commercialIdImage: String
  balance: Float
  location: Location
  locationDelta: [Int]
  notes: [String]
  isDeleted: Boolean
  translation: [TranslationMerchant]
  categoriesIds: [String]!
  tagsIds: [String]!
  cityId: City
  countryId: Country
  productsPriceRange: Float
  twitterUrl: SocialMedia
  facebookUrl: SocialMedia
  websiteUrl: SocialMedia
  snapUrl: SocialMedia
  tiktokUrl: SocialMedia
  mobile: String
  approvedBy: String
  inReview: Boolean
  createdAt: String
  updatedAt: String
  bankAccount: BankAccount
  subscriptions: Subscriptions
  commissions: [MerchantCommissionsRes]
  lowestPriceToOrder: Float
  minimum_delivery_price: Float
}

type MerchantAccountDetailsRes {
  _id: String
  name: String
  description: String
  commercialRegistrationNumber: String
  commercialName: String
  branchesNumber: Int
  hasDeliveryService: Boolean
  address: String
  uuid: String
  # build_status: MERCHANT_BUILD_STATUS
  # release_status: MERCHANT_RELEASE_STATUS
  status: MERCHANT_STATUS
  status_tags: MERCHANT_STATUS_TAGS
  visibility_status: MERCHANT_VISIBILITY_STATUS
  ownerId: String
  logo: String
  identificationImage: String
  commercialIdImage: String
  balance: Float
  location: Location
  locationDelta: [Int]
  notes: [String]
  isDeleted: Boolean
  translation: [TranslationMerchant]
  categoriesIds: [String]!
  tagsIds: [String]!
  cityId: City
  countryId: String
  productsPriceRange: Float
  twitterUrl: SocialMedia
  facebookUrl: SocialMedia
  websiteUrl: SocialMedia
  snapUrl: SocialMedia
  tiktokUrl: SocialMedia
  mobile: String
  approvedBy: String
  inReview: Boolean
  createdAt: String
  updatedAt: String
  total_orders_count: Int
  total_active_orders_count: Int
  total_product_groups_count: Int
  total_product_categories_count: Int
  total_client_branches_visits_count: Int
  total_merchant_employees_count: Int
  bankAccount: BankAccount
  lowestPriceToOrder: Float
  minimum_delivery_price: Float
}

input FindMerchantStatisticsDto {
  fromCreatedAt: String
  toCreatedAt: String
  branchesIds: [String]
}

type DateGroup {
  date: String
  revenue: Float
}

type StatisticsRes {
  _id: String
  name: String
  commercialRegistrationNumber: String
  commercialName: String
  branchesNumber: Int
  hasDeliveryService: String
  address: String
  uuid: String
  # build_status: MERCHANT_BUILD_STATUS
  # release_status: MERCHANT_RELEASE_STATUS
  status: MERCHANT_STATUS
  status_tags: MERCHANT_STATUS_TAGS
  visibility_status: MERCHANT_VISIBILITY_STATUS
  logo: String
  identificationImage: String
  commercialIdImage: String
  balance: Int
  location: Location
  locationDelta: String
  notes: [String]
  ownerId: String
  cityId: String
  categoriesIds: [String]
  tagsIds: [String]
  city: City
  categories: [Category]
  tags: [Tag]
  isDeleted: Boolean
  branches: [Branch]
  twitterUrl: SocialMedia
  facebookUrl: SocialMedia
  websiteUrl: SocialMedia
  snapUrl: SocialMedia
  tiktokUrl: SocialMedia
  createdAt: String
  updatedAt: String
  bankAccount: BankAccount
  reservations: [Reservation]
  ordersProductsItems: [Product]
  productsIntoOrders: [Product]
  totalBranchesCount: Int
  totalMerchantEmployeesCount: Int
  totalOrdersCount: Int
  totalOrdersPrice: Float
  totalClientsOrdersCount: Int
  totalRatesCount: Int
  totalComplaintsAndSuggestionsCount: Int
  totalProductsIntoOrdersCount: Int
  totalProductsCount: Int
  totalReservationsCount: Int
  totalVisitsCount: Int
  groups: [DateGroup]
  lowestPriceToOrder: Float
  minimum_delivery_price: Float
}

input UpdateSocialMediaDtoInput {
  twitterUrl: String
  facebookUrl: String
  websiteUrl: String
  snapUrl: String
  tiktokUrl: String
}

type SocialMediaRes {
  success: Boolean
}

input ReApplyInput {
  status: MERCHANT_STATUS
  merchantId: String
  notes: [String]
}

input OnlineOrOfflineInput {
  status: MERCHANT_VISIBILITY_STATUS
  merchantId: String
  notes: [String]
  ownerId: String
}

input UpdateMerchantStatusByMerchantEmployeeOrOwnerDto {
  visibility_status: MERCHANT_VISIBILITY_STATUS
}

input UpdateMerchantByShoppexEmployeeDto {
  name: String
  description: String
  commercialRegistrationNumber: String
  commercialName: String
  branchesNumber: Int
  hasDeliveryService: Boolean
  address: String
  uuid: String
  # build_status: MERCHANT_BUILD_STATUS
  # release_status: MERCHANT_RELEASE_STATUS
  status: MERCHANT_STATUS
  status_tags: MERCHANT_STATUS_TAGS
  visibility_status: MERCHANT_VISIBILITY_STATUS
  ownerId: String
  logo: String
  identificationImage: String
  commercialIdImage: String
  balance: Float
  location: LocationInput
  locationDelta: [Int]
  notes: [String]
  isDeleted: Boolean
  translation: [TranslationMerchantInput]
  categoriesIds: [String]
  tagsIds: [String]
  cityId: String
  productsPriceRange: Float
  twitterUrl: SocialMediaInput
  facebookUrl: SocialMediaInput
  websiteUrl: SocialMediaInput
  snapUrl: SocialMediaInput
  tiktokUrl: SocialMediaInput
  mobile: String
  bankAccount: BankAccountInput
  commissions: [MerchantCommissionsInput]
  lowestPriceToOrder: Float
  minimum_delivery_price: Float
}

type LinkVisitsRes {
  success: Boolean
}

type CustomersRes {
  client: [Client]
  branches: [Branch]
  orderCount: Int
}

type DashboardClientOrderingHisoryForMerchantRes {
  newCustomers: Int
  returnCustomers: Int
  loyaltyCustomers: Int
  customers: [CustomersRes]
  page: Int
  pages: Int
  length: Int
}

input LinkVisitDto {
  link: LINK_VISIT
}

input SearchDto {
  search: String
  product: Boolean
  merchant: Boolean
}

type SearchMerchantRes {
  _id: String
  name: String
  description: String
  commercialRegistrationNumber: String
  commercialName: String
  branchesNumber: Int
  hasDeliveryService: Boolean
  address: String
  uuid: String
  # build_status: MERCHANT_BUILD_STATUS
  # release_status: MERCHANT_RELEASE_STATUS
  status: MERCHANT_STATUS
  status_tags: MERCHANT_STATUS_TAGS
  visibility_status: MERCHANT_VISIBILITY_STATUS
  ownerId: String
  logo: String
  identificationImage: String
  commercialIdImage: String
  balance: Float
  location: Location
  locationDelta: [Int]
  notes: [String]
  isDeleted: Boolean
  translation: [TranslationMerchant]
  categoriesIds: [String]!
  tagsIds: [String]!
  cityId: City
  countryId: String
  productsPriceRange: Float
  twitterUrl: SocialMedia
  facebookUrl: SocialMedia
  websiteUrl: SocialMedia
  snapUrl: SocialMedia
  tiktokUrl: SocialMedia
  mobile: String
  approvedBy: String
  inReview: Boolean
  createdAt: String
  updatedAt: String
  branches: [Branch]
  bankAccount: BankAccount
  lowestPriceToOrder: Float
  minimum_delivery_price: Float
}

type MarketplaceSearchMerchantsRes {
  merchants: [SearchMerchantRes]
  products: [Product]
}

type UpdateMerchantLowestPriceToOrderRes {
  success: Boolean
}

type UpdateMerchantMinimumDeliveryPriceRes {
  success: Boolean
}

type OrdersRevenuesRes {
  createdAt: String
  revenue: Float
}

type OrdersClientsRes {
  createdAt: String
  count: Int
}

type ClientsRes {
  createdAt: String
  count: Int
}

input FindDashboardMerchantsStatisticsDto {
  fromCreatedAt: String
  toCreatedAt: String
}

type DashboardStatisticsRes {
  totalMerchantsCount: Int
  totalMerchantEmployeesCount: Int
  totalOrdersPrice: Float
  totalOrdersCount: Int
  totalPendingOrdersCount: Int
  totalReadyOrdersCount: Int
  totalAcceptedOrdersCount: Int
  totalDeliveredOrdersCount: Int
  totalCanceledOrdersCount: Int
  totalRejectedOrdersCount: Int
  totalExpiredOrdersCount: Int
  totalOnWayToClientOrdersCount: Int
  totalArrivedToClientOrdersCount: Int
  totalClientNotRespondOrdersCount: Int
  totalClientNotDeliveredOrdersCount: Int
  totalOrdersClientsCount: Int
  totalReservationsCount: Int
  totalComplaintsAndSuggestionsCount: Int
  ordersClients: [OrdersClientsRes]
  ordersRevenues: [OrdersRevenuesRes]
  totalRevenues: Float
  clients: [ClientsRes]
}

type Mutation {
  createMerchant(createMerchantDto: CreateMerchantInput): CreateMerchantRes
  updateMerchantSocialMedia(merchantId: String, updateSocialMediaDto: UpdateSocialMediaDtoInput): SocialMediaRes
  merchantReApply(reApplyDto: ReApplyInput): Merchant
  merchantOnlineOrOffline(onlineOrOfflineDto: OnlineOrOfflineInput): Merchant
  merchantEmployeeOrOwnerUpdateStatus(
    merchantId: String!
    updateMerchantStatusByMerchantEmployeeOrOwnerDto: UpdateMerchantStatusByMerchantEmployeeOrOwnerDto
  ): Merchant
  shoppexEmployeeUpdateMerchant(
    merchantId: String!
    updateMerchantByShoppexEmployeeDto: UpdateMerchantByShoppexEmployeeDto
  ): Merchant
  merchantLinkVisits(id: String!, type: LinkVisitDto): LinkVisitsRes
  merchantPublish(id: String!): Merchant
  updateMerchantLowestPriceToOrder(lowestPriceToOrder: Float!): UpdateMerchantLowestPriceToOrderRes
  updateMerchantMinimumDeliveryPrice(minimum_delivery_price: Float!): UpdateMerchantMinimumDeliveryPriceRes
}

type Query {
  findAllMerchants(query: MerchantQueryInput): FindAllMerchantsRes
  findOneMerchant(merchantId: String!): FindOneMerchantRes
  merchantAccountDetails(merchantId: String!): MerchantAccountDetailsRes
  ownerMerchantAccount: Merchant
  merchantStatistics(merchantId: String!, findMerchantStatisticsDto: FindMerchantStatisticsDto): StatisticsRes
  dashboardClientOrderingHisoryForMerchant(
    merchantId: String!
    query: GetAllDtoInput
  ): DashboardClientOrderingHisoryForMerchantRes

  # Marketplace
  marketplaceSearchMerchants(query: SearchDto): MarketplaceSearchMerchantsRes

  # Dashboard
  dashboardMerchantsStatistics(
    findDashboardMerchantsStatisticsDto: FindDashboardMerchantsStatisticsDto
  ): DashboardStatisticsRes
}
