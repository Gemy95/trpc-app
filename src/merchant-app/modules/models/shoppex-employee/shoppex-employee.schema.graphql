# Types
enum EMPLOYEE_STATUS {
  active
  inactive
  banned
}

enum SortyBy {
  asc
  desc
}
type Permission {
  # labelArabic: String
  # labelEnglish: String
  value: String
}
type Role {
  nameArabic: String
  nameEnglish: String
  permissions: [Permission]
}

type ShoppexDepartment {
  _id: String
  name: String
  uuid: String
  image: String
  translation: [Translation]
  oneSignalTags: [String]
  isDeleted: Boolean
  createdAt: String
  updatedAt: String
}
type ShoppexEmployee {
  _id: String
  role: Role
  permissions: [String]
  departments: [ShoppexDepartment]
  status: EMPLOYEE_STATUS
  mobileIsVerified: Boolean
  emailIsVerified: Boolean
  notifyOnOrders: Boolean
  notifyOnReservations: Boolean
  notifyOnRatings: Boolean
  notifyOnTransactions: Boolean
  notifyOnRequests: Boolean
  name: String
  countryCode: String
  mobile: String
  email: String
  password: String
  uuid: String
  cityId: String
  countryId: String
  type: String
  isDeleted: Boolean
  createdAt: String
  updatedAt: String
}

type ShoppexEmployeeResponse {
  message: String
  success: Boolean
  users: [ShoppexEmployee]
}

type ShoppexEmployeeLoginResponse {
  _id: String
  role: Role
  permissions: [String]
  departments: [ShoppexDepartment]
  status: EMPLOYEE_STATUS
  mobileIsVerified: Boolean
  emailIsVerified: Boolean
  notifyOnOrders: Boolean
  notifyOnReservations: Boolean
  notifyOnRatings: Boolean
  notifyOnTransactions: Boolean
  notifyOnRequests: Boolean
  name: String
  countryCode: String
  mobile: String
  email: String
  password: String
  uuid: String
  cityId: String
  countryId: String
  type: String
  isDeleted: Boolean
  token: String
  refreshToken: String
}

# Inputs
input ShoppexEmployeeQueryInput {
  page: Int
  limit: Int
  sortBy: String
  paginate: Boolean
  order: SortyBy
  employeeName: String
  employeeEmail: String
  employeeMobile: String
  departments: [String]
  status: EMPLOYEE_STATUS
}

type RequestForgotPasswordResponse {
  message: String
  success: Boolean
}

input ShoppexEmployeeLoginInput {
  countryCode: String!
  mobile: String!
  password: String!
  uuid: String
}

input RequestForgotPassword {
  email: String!
}

input VerifyForgotPasswordInput {
  email: String!
  otp: String!
  uuid: String
}

input  VerifyForgetPasswordShoppexEmployeeDto {
  email: String!
  otp: String!
  uuid: String
}

input ChangePasswordShoppexEmployeeDto {
  email: String!
  oldPassword: String!
  password: String!
  uuid: String
}

type ShoppexEmployeeChangePasswordRes {
  updatedEmployee: ShoppexEmployee
  token: String  
}

input CreateShoppexEmployeeDto {
  name: String!
  countryCode: String!
  mobile: String!
  email: String!
  password: String!
  cityId: String!
  countryId: String!
  uuid: String
  departments: [String]
  status: EMPLOYEE_STATUS!
  gender: Gender
  notifyOnOrders: Boolean
  notifyOnReservations: Boolean
  notifyOnRatings: Boolean
  notifyOnTransactions: Boolean
  notifyOnRequests: Boolean
  permissions: [PermissionValue]
}

input UpdateShoppexEmployeeDto {
  name: String
  countryCode: String
  mobile: String
  email: String
  password: String
  cityId: String
  countryId: String
  uuid: String
  departments: [String]
  status: EMPLOYEE_STATUS!
  gender: Gender
  notifyOnOrders: Boolean
  notifyOnReservations: Boolean
  notifyOnRatings: Boolean
  notifyOnTransactions: Boolean
  notifyOnRequests: Boolean
  permissions: [PermissionValue]
}

type ShoppexEmployeeImagesAttachmentRes {
  url: String
}

# Queries
type Query {
  getShoppexEmployees(shoppexEmployeeQueryInput: ShoppexEmployeeQueryInput): ShoppexEmployeeResponse
  getShoppexEmployeeById(_id: String): ShoppexEmployee
  shoppexEmployeeImagesAttachment: [ShoppexEmployeeImagesAttachmentRes]
}

# Mutations
type Mutation {
  createShoppexEmployee (createShoppexEmployeeDto: CreateShoppexEmployeeDto) : ShoppexEmployee
  shoppexEmployeeLogin(shoppexEmployeeLoginInput: ShoppexEmployeeLoginInput): ShoppexEmployeeLoginResponse
  requestForgotShoppexEmployeePassword(requestForgotPasswordInput: RequestForgotPassword): RequestForgotPasswordResponse
  verifyForgotShoppexEmployeePassword(
    verifyForgotPasswordInput: VerifyForgotPasswordInput
  ): RequestForgotPasswordResponse
  shoppexEmployeeVerifyForgetPassword (verifyForgetPasswordShoppexEmployeeDto: VerifyForgetPasswordShoppexEmployeeDto) : Void
  shoppexEmployeeChangePassword (changePasswordShoppexEmployeeDto: ChangePasswordShoppexEmployeeDto) : ShoppexEmployeeChangePasswordRes
  shoppexEmployeeUpdate (id: String!, updateEmployeeDto: UpdateShoppexEmployeeDto) : ShoppexEmployee
  shoppexEmployeeDelete (id: String!) : ShoppexEmployee
  shoppexEmployeeRefreshToken: ShoppexEmployeeLoginResponse
}
